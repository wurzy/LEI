ESTRUTURA DSL:

<!LANGUAGE pt/en>
[
  'repeat(x)': {...}
  (, 'repeat(x)': {...})*
]

---------------------------------------------------------

DIRETIVAS:

range(n) - gera uma lista [0,n[ - ARRAY INTEIROS
range(init,end) - gera uma lista [init,end[; ordem ascendente ou descendente - ARRAY INTEIROS
[ 'repeat(n)': ... ] - repete o elemento à frente n vezes; o mesmo array pode ter vários repeats seguidos - ARRAY
[ 'repeat(min,max)': ... ] - repete o elemento à frente entre min a max vezes; o mesmo array pode ter vários repeats seguidos - ARRAY
missing(x) {prop} - probabilidade x(1-99) de o objeto não possuir a propriedade em questão - PROP DE DENTRO NOT REQUIRED
having(x) {prop} - probabilidade x(1-99) de o objeto possuir a propriedade em questão - PROP DE DENTRO NOT REQUIRED

---------------------------------------------------------

MOUSTACHES:

- valores de propriedades de objetos
- valores de arrays

'{{objectId()}}' - gera um _id aleatório a la mongo - STRING
'{{guid()}}' - gera um UUID aleatório - STRING
'{{index()}}' - índice atual no repeat - INTEIRO
'{{bool()}}' - gera um boleano aleatório - BOLEANO
'{{integer(int1,int2)}}' - gera um inteiro aleatório >= int1 e <= int2 - INTEIRO
'{{integer(int1,int2,unidades)}}' - gera um inteiro aleatório >= int1 e <= int2 e acrescenta as unidades indicadas - STRING
'{{floating(num1,num2)}}' - gera um float aleatório >= num1 e <= num2 (nr de casas decimais = nr de casas decimais do argumento com mais) - FLOAT
'{{floating(num1,num2,casas)}}' - gera um float aleatório >= num1 e <= num2 com o nr de casas decimais indicadas - FLOAT
'{{floating(num1,num2,casas,formato)}}' - gera um float aleatório >= num1 e <= num2 com o nr de casas decimais indicadas no formato dado - STRING
'{{position()}}' - gera coordenadas aleatórias - STRING
'{{position([min_lat, max_lat], [min_long, max_long])}}' - gera coordenadas dentro dos intervalos dados - STRING
'{{phone()}}' - gera um número de telemóvel português (sem extensão) - STRING
'{{phone(bool)}}' - gera um número de telemóvel português com extensão (+351), se bool == true - STRING
'{{date(data_init)}}' - gera uma data aleatória entre a data argumento e hoje - STRING
'{{date(data_init, formato)}}' - gera uma data aleatória entre a data argumento e hoje no formato dado - STRING
'{{date(data_init, data_fim)}}' - gera uma data aleatória entre as datas argumentos - STRING
'{{date(data_init, data_fim, formato)}}' - gera uma data aleatória entre a data argumento e hoje no formato dado - STRING
'{{random(arg1,...,argN)}}' - escolhe um dos argumentos aleatoriamente (pode receber inteiros, floats, strings, boleanos e null; mínimo 1 arg) - INTEIRO, FLOAT, STRING, BOLEANO, NULL
'{{lorem(n,"words"/"sentences"/"paragraphs")}}' - gera n palavras/frases/parágrafos lorem ipsum - STRING

TUDO STRING
'{{pt_district()}}' - distrito pt
'{{pt_county()}}' - concelho pt
'{{pt_county(district_name)}}' - concelho pt do distrito indicado
'{{pt_parish()}}' - freguesia pt
'{{pt_parish("district"/"county",name)}}' - freguesia pt do distrito/concelho indicado
'{{firstName()}}' - nome próprio
'{{surname()}}' - apelido
'{{fullName()}}' - nome completo
'{{animal()}}' - animal
'{{buzzword()}}' - buzzword
'{{car_brand()}}' - marca de carro
'{{continent()}}' - continente
'{{sport()}}' - desporto
'{{brand()}}' - marca
'{{religion()}}' - religião
'{{gov_entity()}}' - organização governamental
'{{country()}}' - país
'{{pt_political_party()}}' - partido político pt (abreviação + nome) - OBJETO 2 STRINGS
'{{pt_political_party("abbr"/"name")}}' - sigla/nome de um partido político pt

PS: as funções que levam intervalos de valor funcionam tanto por ordem asc como desc

--------------------------------------------------------

POR IMPLEMENTAR:

- map, filter, reduce
- lista de erros para apresentar de maneira user-friendly no vue -> keywords reservadas do Strapi
- CSV

- repeats diretos de probabilities?

- fazer o modelo para os casos especiais de coleções
- preciso de mudar o missing para não usar um member e calcular as probabilidades logo nessa parte

IDEIAS AUTOS:
- aceder a propriedades de níveis superiores (global?)
- dar ao repeat uma var local de argumento em vez de int direto

- ver se o random e o integer novos funcionam direito em função

-- coleções
-- casos especiais em parcelas de arrays?
-- tirar os repetidos no values_map ao acabar um repeat



--------------------------------------------------------

PROGRESSO DESTA SEMANA:

- XML
- gramática bullet-proof (Strapi)
- funcionalidades novas dos PPD e Autos
	- index(offset)
	- .string()
	- integer com x número de algarismos (padding de zeros à esquerda)
	- dataset pt_entities -> sigla ou designacao
	- caracteres não-ASCII em nomes de atributos
	- dar moustaches como argumentos ao random -> generalizar os args para qualquer coisa
	- atributo on condition
	- atributos mutuamente exclusivos
	- pelo menos x de um conjunto de atributos
	- repeat_unique com moustaches (precário)































- aceitar vários repeats seguidos (retornar uma lista com várias coleções diferentes)
- moustaches para gerar datas aleatórias
- recursividade infinita no processamento de moustaches (permitir moustaches em qualquer objeto e array)
- moustaches de acesso a datasets
- sistema para definir a linguagem dos datasets
	- moustaches sempre em inglês
	- linha inicial no texto a ser processado que indica pt/en
	- datasets pt e en para cada coleção
- interpolação de strings com moustaches
	- entre plicas pode vir:
		- string vazia: ''
		- string: 'bom dia'
		- moustaches: '{{index()}}'
		- interpolação: 'texto - {{pt_parish()}}, {{pt_county()}}, {{pt_district()}}'

- permitir qualquer tipo em missing/having
- reestruturar o programa para o formato a la json-server que discutimos com o professor
- otimizar a estrutura da gramática
- versão inicial das propriedades com código
- suporte pt/en dos datasets

- range a la Python
- datasets pt/en
- funções
- randoms com garantia de não repetir elementos
- modelo de strapi com a filipa